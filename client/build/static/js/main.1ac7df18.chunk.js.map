{"version":3,"sources":["firebase/secret.ts","firebase/firestore.ts","components/FullScreen/FullScreen.tsx","components/General/PageLogoLink.tsx","components/Screenshots/SingleScreenshot.tsx","components/Screenshots/ScreenshotRow.tsx","helpers/dataCreation.ts","components/General/ShowMoreButton.tsx","helpers/generalHelpers.tsx","components/Screenshots/Screenshots.tsx","components/Topbar/CustomTabs.tsx","components/Topbar/Topbar.tsx","components/WebsiteSelector/WebsiteSelector.tsx","components/WebsiteSelector/WebsiteSelectorGrouping.tsx","components/DateSelector/DateSlider.tsx","components/DateSelector/DateSelector.tsx","components/DateSelector/DateGroup.tsx","firebase/storage.ts","helpers/mapFunctions.ts","helpers/stateHelpers.ts","components/General/VirtualizedAutoComplete.tsx","components/Words/WordsFunctions.ts","components/Words/Graph.tsx","components/Words/MobileGraph.tsx","components/Words/MobileGraphs.tsx","components/Words/WordCompare.tsx","components/Words/WordSlider.tsx","components/Words/GraphsByPopularity.tsx","components/Words/Words.tsx","components/Headings/HeadingsFunctions.ts","components/Headings/SingleHeading.tsx","components/Headings/HeadingCell.tsx","components/Headings/HeadingsRow.tsx","components/Headings/Headings.tsx","App.tsx","index.tsx"],"names":["firebaseConfig","apiKey","process","google_cloud","authDomain","projectId","storageBucket","initializeApp","db","getFirestore","getHeadingDailyData","a","res","getDocs","collection","forEach","doc","data","id","fetchStaticWebsiteDataMap","docRef","getDoc","docSnap","exists","FullScreen","fullScreenImage","setFullScreenImage","className","onClick","e","fullscreen","document","getElementById","scroll","src","alt","PageLogoLink","name","link","href","title","SingleScreenshot","screenshot","Skeleton","variant","height","width","ScreenshotRow","screenshots","selectedWebsites","Grid","item","sm","container","direction","justify","map","index","show","links","names","getNPreviousDates","n","passedDate","Date","copy","i","setDate","getDate","push","getPreviousDay","d","getNextDay","formatedYearFromDate","getMonth","getFullYear","formatedYearsFromDates","dates","arr","date","dateToFormatedMonth","getCleanNewDate","setHours","setMinutes","setSeconds","setMilliseconds","dateFromFormatedDate","str","dateSplit","split","tempStr","length","nextSymbol","shift","Number","setMonth","setFullYear","getAllDatesBetween","d1","d2","d1Time","getTime","d2Time","max","min","temp","checkIfSameDay","a1","b1","c1","a2","b2","c2","console","log","ShowMoreButton","state","setState","useState","multipliers","setMultipliers","Button","color","newState","reverseArrayInPlace","array","Screenshots","screenshotsByDate","chosenDates","getSrcFromMap","formatedDate","formatedDates","setFormatedDates","displayedCount","setDisplayedCount","useEffect","justifyContent","alignContent","alignItems","fortmatedDate","Fragment","CustomTabs","location","useLocation","val","setVal","getValue","pathname","locationMap","locationString","a11yProps","Tabs","value","aria-label","Tab","label","component","NavLink","activeClassName","to","HideOnScroll","trigger","useScrollTrigger","Slide","appear","in","AppBar","Toolbar","Typography","ScrollTop","classes","makeStyles","theme","createStyles","root","position","bottom","spacing","right","zIndex","useStyles","disableHysteresis","threshold","Zoom","event","anchor","target","ownerDocument","scrollIntoView","behavior","block","role","Fab","size","Topbar","button","display","marginTop","formControl","margin","minWidth","formInpput","minHeight","WebsiteSelect","websiteSelectData","updateFunction","age","setAge","open","setOpen","toggled","setToggled","xs","FormControl","Select","labelId","onClose","onOpen","onChange","MenuItem","Switch","checked","inputProps","WebsiteSelectorGrouping","webisteJointData","setSelectedWebsites","webisteDataInRows","setWebisteDataInRows","returnUpdateFunction","useCallback","namesCopy","linksCopy","url","updateNameAndUrl","showCopy","updateShow","Object","keys","politicsBasedOnRows","toReturn","entry","politicalOrientation","createRowObjects","key","DateSlider","fringeDates","updateChosenDates","React","setValue","setDates","getDay","pop","marks","getSevenPreviousDays","first","second","firstIndex","indexOf","secondIndex","Slider","newValue","onChangeCommitted","step","DateSelector","error","setError","localDates","setLocalDates","handleGenerator","num","normalDate","toDate","utils","MomentUtils","disableToolbar","format","KeyboardButtonProps","maxDate","minDate","gutterBottom","DateGroup","storage","getStorage","getImgSrcFromName","fileName","childRef","ref","trueURL","getDownloadURL","then","catch","getScreenshotURL","getMissingScreenshots","currentData","combineWordMaps","result","basket","entries","sortKeysByCount","sort","b","cretaeImagesSources","missing","newData","merge","getSuggestions","wordData","total","word","isNaN","wordCount","undefined","count","renderRow","props","style","cloneElement","top","OuterElementContext","createContext","OuterElementType","forwardRef","outerProps","useContext","ListboxComponent","children","other","itemData","Children","toArray","useTheme","smUp","useMediaQuery","breakpoints","up","noSsr","itemCount","itemSize","getChildSize","child","isValidElement","type","ListSubheader","gridRef","useRef","current","resetAfterIndex","useResetCache","Provider","reduce","outerElementType","innerElementType","overscanCount","VirtualizedAutoComplete","suggestions","stateChange","Autocomplete","debug","disableListWrap","multiple","freeSolo","options","Total","renderInput","params","TextField","renderOption","option","noWrap","words","x","toLowerCase","renderTags","getTagProps","Chip","getNamesFromGraphData","filter","Graph","webisteJointDataMap","wordOrder","graphData","setGraphData","currentWord","currentGraphMap","ResponsiveContainer","BarChart","left","layout","CartesianGrid","strokeDasharray","YAxis","dataKey","XAxis","allowDecimals","Tooltip","Legend","Bar","fill","replace","MobileGraph","passedData","MobileGraphs","WordCompare","wordDataOfAll","wordDataOfSelected","selectedWord","setSelectedWords","graphDataOfAll","setGraphDataOfAll","graphDataOfSelected","setGrapDataOfSelected","allNames","selectedNames","allRes","selectedRes","valuetext","DiscreteSlider","defaultValue","getAriaValueText","aria-labelledby","valueLabelDisplay","GraphsByPopularity","sortedSelectedWordsByCount","sortedAllWordsByCount","Words","setSortedSelectedByCount","setSortedAllByCount","checkIfContainsWords","headingText","splitHeading","SingleHeading","text","ListItem","Link","onError","classList","add","HeadingCell","headings","downloadedHeadingImages","selectedWords","image","HeadingsRow","headingsRow","pog","Headings","headingMap","setDowloadedHeadingImages","columnHeadingData","setColumnHeadingData","totalData","tempObj","siteData","totalDailySiteData","getSelectedHeadings","getURLPair","trueUrl","promisesOfTrueURLS","halo","Promise","all","trueURLS","megaMap","assign","downloadAndCacheImages","row","App","setScreenshotsByDate","setWebisteJointData","setHeadingMap","setFringeDates","setChosenDates","setWordDataOfAll","setWordDataOfSelected","selectedSuggsetions","setSelectedSuggsetions","allSuggsetions","setAllSuggsetions","setFellScreenAndResetPosition","toggle","updateFringesBasedOnHeadigs","maxAndMin","maxStr","lowestDate","returnMaxAndMinDateFromKeys","fetchAndSetStaticStates","totalWebisteMap","updateSreenshots","totalMap","selectedMap","mapOfArr","datesBetween","pageDailyFrequencyOfWords","combinedForTotal","combinedForSelected","combinedForName","getSelectedAndAllWordMap","path","require","config","ReactDOM","render"],"mappings":"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","file":"static/js/main.1ac7df18.chunk.js","sourcesContent":["\r\nexport  const firebaseConfig = {\r\n  apiKey:process.env.google_cloud,\r\n  authDomain: \"newscomparer.firebaseapp.com\",\r\n  projectId: \"newscomparer\",\r\n  storageBucket: \"newscomparer.appspot.com\",\r\n};\r\n\r\n","import { getFirestore, collection, getDocs } from \"firebase/firestore\";\r\nimport {\r\n  WebsiteJointDataMap,\r\n  TotalWebsiteStaticDataMap,  \r\n  DailyHeadingsEntry,\r\n  HeadingsByDate,\r\n  WebsiteJointData,\r\n} from \"../interfaces\";\r\n// initial configuration\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { firebaseConfig } from \"./secret\";\r\nimport { doc, getDoc } from \"firebase/firestore\";\r\n\r\ninitializeApp(firebaseConfig);\r\nconst db = getFirestore();\r\nfunction isDailyHEadings(object: any): object is DailyHeadingsEntry {\r\n  return 'totalDailyFrequencyOfWords' in object;\r\n}\r\n\r\nexport const getHeadingDailyData = async (): Promise<HeadingsByDate | null>  => {\r\n  const res :HeadingsByDate = {};\r\n  const querySnapshot = await getDocs(collection(db, \"Headings\"));\r\n  querySnapshot.forEach((doc) => {\r\n    const a = doc.data()\r\n    if(isDailyHEadings(a)){\r\n      res[doc.id] = a;\r\n    }\r\n  });\r\n  return res;\r\n};\r\n// fetches static wbesite data in form of an array\r\nexport const fetchStaticWebsiteDataMap =\r\n  async (): Promise<TotalWebsiteStaticDataMap | null>  => {\r\n    const docRef = doc(db, \"Websites\", \"StaticWebisteData\");\r\n    const docSnap = await getDoc(docRef);\r\n    if (docSnap.exists()) {\r\n      return docSnap.data();\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n//categorizes website data based on political orientation\r\nexport const createRowObjects = (\r\n  arr: WebsiteJointDataMap\r\n): WebsiteJointData[][] => {\r\n  const toReturn  :WebsiteJointData[][] = [[],[],[]]\r\n    for (let entry in arr) {\r\n      const item = arr[entry];\r\n      console.log(item,arr,entry,\"robienie\")\r\n      if (item!.politicalOrientation === \"left\") {\r\n        toReturn[0].push(item);\r\n      } else if (item!.politicalOrientation === \"center\") {\r\n        toReturn[1].push(item);\r\n      } else {\r\n        toReturn[2].push(item);\r\n      }\r\n    }\r\n  \r\n  return toReturn;\r\n};\r\n","\r\nconst FullScreen = ({\r\n  fullScreenImage,\r\n  setFullScreenImage,\r\n}: {\r\n  fullScreenImage: string;\r\n  setFullScreenImage: (src: string) => void;\r\n}) => {\r\n  const close = (e: React.MouseEvent<HTMLElement>) => {\r\n    setFullScreenImage(\"\");\r\n    const fullscreen = document.getElementById(\"fullscreen\");\r\n    if (fullscreen) {\r\n      fullscreen.scroll(0, 0);\r\n    }\r\n  };\r\n \r\n\r\n  return (\r\n    <div\r\n      className={`fullscreen ${fullScreenImage === \"\" ? \"hide\" : \"\"}`}\r\n      id=\"fullscreen\"\r\n      onClick={close}\r\n    >\r\n      <div className=\"fullscreen--wrrapper\">\r\n        <img\r\n          src={fullScreenImage}\r\n          alt=\"test\"\r\n          className={`fullscreen--image ${\r\n            fullScreenImage === \"\" ? \"hide\" : \"\"\r\n          }`}\r\n          id=\"fullScreenImage\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FullScreen;\r\n","const PageLogoLink = ({name,link}:{name:string,link:string}) => {\r\n  return (\r\n    <a className=\"heading--logo-image-wrapper\" href={link}>\r\n    <img\r\n      src={`${name}_Logo.png`}\r\n      alt={name}\r\n      className=\"heading--logo-image\"\r\n      title={`Link to ${name}`}\r\n    />\r\n  </a>\r\n  )\r\n}\r\n\r\nexport default PageLogoLink\r\n","import { Skeleton } from \"@material-ui/lab\";\r\nimport PageLogoLink from \"../General/PageLogoLink\";\r\n\r\nconst SingleScreenshot = ({\r\n  setFullScreenImage,\r\n  screenshot,\r\n  name,\r\n  link\r\n}: {\r\n  setFullScreenImage: (src: string) => void;\r\n  screenshot: string;\r\n  name: string;\r\n  link:string\r\n}) => {\r\n  return (\r\n    <div className=\"screenshots--wrapper\">\r\n  <PageLogoLink name={name} link={link}/>\r\n\r\n      <div className=\"screenshots--image-container\">\r\n        {screenshot  !== \"\" ? (\r\n          <img\r\n            src={screenshot}\r\n            className=\"screenshots--image\"\r\n            onClick={() => setFullScreenImage(screenshot)}\r\n            alt=\"screenshot of website\"\r\n          />\r\n        ) : (\r\n          <Skeleton variant=\"rect\" height={640} width=\"80%\" />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SingleScreenshot;\r\n","import { Grid } from \"@material-ui/core\";\r\nimport { SelectedWebsites } from \"../../interfaces\";\r\nimport SingleScreenshot from \"./SingleScreenshot\";\r\nimport { Fragment } from \"react\";\r\nconst ScreenshotRow = ({\r\n  setFullScreenImage,\r\n  screenshots,\r\n  selectedWebsites,\r\n}: {\r\n  setFullScreenImage: (src: string) => void;\r\n  screenshots: string[];\r\n  selectedWebsites: SelectedWebsites;\r\n}) => {\r\n  return (\r\n    <Grid\r\n      item\r\n      sm\r\n      container\r\n      direction=\"row\"\r\n      justify=\"flex-start\"\r\n      className=\"screenshots\"\r\n    >\r\n      {screenshots.map((screenshot, index) => {\r\n        return (\r\n          <Fragment key={index}>\r\n            {selectedWebsites.show[index] ? (\r\n              <SingleScreenshot\r\n                link={selectedWebsites.links[index]}\r\n                key={index}\r\n                setFullScreenImage={setFullScreenImage}\r\n                screenshot={screenshot}\r\n                name={selectedWebsites.names[index]}\r\n              />\r\n            ) : null}\r\n          </Fragment>\r\n        );\r\n      })}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default ScreenshotRow;\r\n","import { AnyMap, FringeDates } from \"../interfaces\";\r\n// why so long? TODO\r\nexport const getNPreviousDates = (\r\n  n: number = 0,\r\n  passedDate: Date = new Date()\r\n) => {\r\n  // makes function pure\r\n  const copy = new Date(passedDate);\r\n  const res: Date[] = [new Date(copy)];\r\n  for (let i = 0; i < n; i++) {\r\n    copy.setDate(copy.getDate() - 1);\r\n    res.push(new Date(copy));\r\n  }\r\n  return res;\r\n};\r\n\r\nexport const getPreviousDay = (d: Date) => {\r\n  const copy = new Date(d);\r\n  copy.setDate(copy.getDate() - 1);\r\n  return new Date(copy);\r\n};\r\n\r\nconst getNextDay = (d: Date) => {\r\n  const copy = new Date(d);\r\n  copy.setDate(copy.getDate() + 1);\r\n  return new Date(copy);\r\n};\r\n\r\nexport const createFileNames = (\r\n  name: string,\r\n  n: number,\r\n  passedDate: Date = new Date()\r\n) => {\r\n  const res: string[] = [];\r\n  const dates = getNPreviousDates(n, passedDate);\r\n  const dateStrings = formatedYearsFromDates(dates);\r\n  dateStrings.forEach((dateString) => {\r\n    res.push(`${dateString}-${name}.jpg`);\r\n  });\r\n  return res;\r\n};\r\n\r\nexport const formatedYearFromDate = (d: Date) => {\r\n  return `${d.getDate()}-${d.getMonth() + 1}-${d.getFullYear()}`;\r\n};\r\n\r\nexport const formatedYearsFromDates = (dates: Date[]) => {\r\n  const arr: string[] = [];\r\n  dates.forEach((date) => {\r\n    arr.push(formatedYearFromDate(date));\r\n  });\r\n  return arr;\r\n};\r\n\r\n// human readable\r\nexport const dateToFormatedMonth = (d: Date) => {\r\n  return `${d.getDate()}-${d.getMonth() + 1}`;\r\n};\r\n\r\nexport const datesToFormatedMonths = (dates: Date[]) => {\r\n  const arr: string[] = [];\r\n  dates.forEach((date) => {\r\n    arr.push(dateToFormatedMonth(date));\r\n  });\r\n  return arr;\r\n};\r\n\r\nexport const getCleanNewDate = () =>{\r\n  const date = new Date()\r\n  date.setHours(0)\r\n  date.setMinutes(0)\r\n  date.setSeconds(0)\r\n  date.setMilliseconds(0)\r\n\r\n  return date\r\n}\r\nconst dateFromFormatedDate = (str:string ) =>{\r\n  \r\n  const dateSplit :string[] = str.split(\"\")\r\n  // aray with day month and year string\r\n  const arr:number[] = []\r\n  let tempStr = \"\"\r\n  while(dateSplit.length  !== 0 ){  \r\n    let nextSymbol = dateSplit.shift()\r\n    if(nextSymbol === \"-\"){\r\n      arr.push(Number(tempStr))\r\n      tempStr = \"\"\r\n    }else{\r\n      tempStr += nextSymbol\r\n    }\r\n  }\r\n  // pushes year to arr\r\n  arr.push(Number(tempStr))\r\n  const date = new Date()\r\n  date.setDate(arr[0])\r\n  // month decremented beace os js weirdness\r\n  date.setMonth(arr[1]-1)\r\n  \r\n  date.setFullYear(arr[2])\r\n  return date\r\n  // console.log(arr,date,formatedYearFromDate(date),\"ARRR\",str)\r\n}\r\nexport const returnMaxAndMinDateFromKeys = (\r\n  headings: AnyMap,\r\n  now: Date = getCleanNewDate()\r\n): FringeDates => {\r\n  let max = now;\r\n  let maxStr = formatedYearFromDate(max);\r\n  const keys = Object.keys(headings);\r\n\r\n  if (keys.indexOf(maxStr) !== -1) {\r\n  } else {\r\n    max = getPreviousDay(max);\r\n  }\r\n  let lowestDate = new Date(16275140724101)\r\n\r\n for(const index in keys){\r\n    const date =   dateFromFormatedDate(keys[index])\r\n    const milisecods = date.getTime()\r\n\r\n    if(milisecods<lowestDate.getTime()){\r\n      lowestDate= date\r\n    }\r\n\r\n  }\r\n  console.log(\"XDDDD\",lowestDate)\r\n  return {\r\n    max: max,\r\n    min: lowestDate,\r\n  };\r\n};\r\n\r\nexport const getAllDatesBetween = (\r\n  d1: Date | FringeDates,\r\n  d2: Date = new Date()\r\n): Date[] => {\r\n  // d1 is smaller\r\n  if (d1 instanceof Date) {\r\n    let d1Time = d1.getTime();\r\n    let d2Time = d2.getTime();\r\n    if (d1Time > d2Time) {\r\n      d2 = new Date(d1Time);\r\n      d1 = new Date(d2Time);\r\n    }\r\n  } else {\r\n    d2 = d1.max;\r\n    d1 = d1.min;\r\n  }\r\n\r\n  const res: Date[] = [];\r\n  let temp = new Date(d1);\r\n  while (!checkIfSameDay(temp, d2)) {\r\n    res.push(temp);\r\n    temp = getNextDay(temp);\r\n  }\r\n  res.push(temp);\r\n  return res;\r\n};\r\n\r\nexport const checkIfSameDay = (d1: Date, d2: Date) => {\r\n  const a1 = d1.getDate();\r\n  const b1 = d1.getMonth();\r\n  const c1 = d1.getFullYear();\r\n  const a2 = d2.getDate();\r\n  const b2 = d2.getMonth();\r\n  const c2 = d2.getFullYear();\r\n  console.log(a1,a2,b1,b2,c1,c2,)\r\n  if (a1 === a2 && b1 === b2 && c1 === c2) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst ShowMoreButton = ({\r\n  state,\r\n  setState,\r\n  className,\r\n  max,\r\n}: {\r\n  state: number;\r\n  setState: React.Dispatch<React.SetStateAction<number>>;\r\n  className: string;\r\n  max: number;\r\n}) => {\r\n  const [multipliers, setMultipliers] = useState(1);\r\n  const handleClick = () => {\r\n    const newState = state + 3 * multipliers;\r\n    if (newState <= max) {\r\n      setState(newState);\r\n    } else {\r\n      setState(max);\r\n    }\r\n    setMultipliers(multipliers + 1);\r\n  };\r\n  return (\r\n    <>\r\n      {state < max ? (\r\n        <Button\r\n          className={`${className} show-more-button`}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={handleClick}\r\n        >\r\n          Show More\r\n        </Button>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ShowMoreButton;\r\n","export   const reverseArrayInPlace = (array: any[]) => {\r\n  for (let i = 0; i < array.length / 2; i++) {\r\n    [array[i], array[array.length - 1 - i]] = [\r\n      array[array.length - 1 - i],\r\n      array[i],\r\n    ];\r\n  }\r\n  return array;\r\n};","import React, { useState, useEffect } from \"react\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport ScreenshotRow from \"./ScreenshotRow\";\r\nimport {\r\n  FringeDates,\r\n  ScreenshotsByDate,\r\n  SelectedWebsites,\r\n} from \"../../interfaces\";\r\nimport {\r\n  getAllDatesBetween,\r\n  formatedYearsFromDates,\r\n} from \"../../helpers/dataCreation\";\r\nimport ShowMoreButton from \"../General/ShowMoreButton\";\r\nimport { reverseArrayInPlace } from \"../../helpers/generalHelpers\";\r\nconst Screenshots = ({\r\n  setFullScreenImage,\r\n  screenshotsByDate,\r\n  chosenDates,\r\n  selectedWebsites,\r\n}: {\r\n  setFullScreenImage: (src: string) => void;\r\n  screenshotsByDate: ScreenshotsByDate;\r\n  chosenDates: FringeDates;\r\n  selectedWebsites: SelectedWebsites;\r\n}) => {\r\n  const getSrcFromMap = (formatedDate: string, name: string): string => {\r\n    // if image has no image in DB, we return empty string\r\n    let src = \"\";\r\n    try {\r\n      src = screenshotsByDate[formatedDate][name];\r\n    } finally {\r\n      return src;\r\n    }\r\n  };\r\n  const [formatedDates, setFormatedDates] = useState<string[]>([]);\r\n  const [displayedCount, setDisplayedCount] = useState<number>(2);\r\n\r\n  useEffect(() => {\r\n    setFormatedDates(\r\n      reverseArrayInPlace(\r\n        formatedYearsFromDates(getAllDatesBetween(chosenDates))\r\n      )\r\n    );\r\n  }, [chosenDates]);\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"column\"\r\n      justifyContent=\"center\"\r\n      alignContent=\"center\"\r\n      alignItems=\"center\"\r\n    >\r\n      <p className=\"headings--tip\">\r\n        Click on the image to make it full screen, click again to close it\r\n      </p>\r\n      {formatedDates.map((fortmatedDate, index) => {\r\n        return (\r\n          <React.Fragment key={index}>\r\n            {index <= displayedCount ? (\r\n              <Grid\r\n                item\r\n                container\r\n                justify=\"center\"\r\n                alignItems=\"center\"\r\n                direction=\"column\"\r\n                key={index}\r\n              >\r\n                <p className=\"headings--date\">{fortmatedDate}</p>\r\n\r\n                <ScreenshotRow\r\n                  key={index}\r\n                  setFullScreenImage={setFullScreenImage}\r\n                  screenshots={[\r\n                    getSrcFromMap(fortmatedDate, selectedWebsites.names[0]),\r\n                    getSrcFromMap(fortmatedDate, selectedWebsites.names[1]),\r\n                    getSrcFromMap(fortmatedDate, selectedWebsites.names[2]),\r\n                  ]}\r\n                  selectedWebsites={selectedWebsites}\r\n                />\r\n              </Grid>\r\n            ) : null}\r\n          </React.Fragment>\r\n        );\r\n      })}\r\n      <ShowMoreButton\r\n        state={displayedCount}\r\n        setState={setDisplayedCount}\r\n        className=\"\"\r\n        max={formatedDates.length}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Screenshots;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport { NavLink, useLocation } from \"react-router-dom\";\r\nimport { WordMap } from \"../../interfaces\";\r\n\r\nconst CustomTabs = () => {\r\n  let location = useLocation();\r\n  const [val, setVal] = useState(0);\r\n  useEffect(() => {\r\n    setVal(getValue(location.pathname));\r\n  }, [location]);\r\n  const locationMap: WordMap = {\r\n    \"/words\": 0,\r\n    \"/headings\": 1,\r\n    \"/screenshots\": 2,\r\n  };\r\n  const getValue = (locationString: string) => {\r\n    const value = locationMap[locationString];\r\n    return value;\r\n  };\r\n  function a11yProps(index: any) {\r\n    return {\r\n      id: `simple-tab-${index}`,\r\n      \"aria-controls\": `simple-tabpanel-${index}`,\r\n    };\r\n  }\r\n  return (\r\n    <Tabs\r\n      variant=\"scrollable\"\r\n      value={val <= 3 ? val : false}\r\n      aria-label=\"simple tabs example\"\r\n      className=\"appbarr--left-container\"\r\n    >\r\n      <Tab\r\n        label=\"Words\"\r\n        {...a11yProps(0)}\r\n        component={NavLink}\r\n        activeClassName=\"selected\"\r\n        to=\"/words\"\r\n      />\r\n\r\n      <Tab\r\n        label=\"Headings\"\r\n        {...a11yProps(1)}\r\n        component={NavLink}\r\n        activeClassName=\"selected\"\r\n        to=\"/headings\"\r\n      />\r\n\r\n      <Tab\r\n        label=\"Screenshots\"\r\n        {...a11yProps(2)}\r\n        to=\"/screenshots\"\r\n        component={NavLink}\r\n        activeClassName=\"selected\"\r\n      />\r\n    </Tabs>\r\n  );\r\n};\r\n\r\nexport default CustomTabs;\r\n","import React from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport useScrollTrigger from \"@material-ui/core/useScrollTrigger\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\r\nimport Zoom from \"@material-ui/core/Zoom\";\r\nimport CustomTabs from \"./CustomTabs\";\r\nimport {NavLink } from \"react-router-dom\";\r\n\r\n\r\nfunction HideOnScroll() {\r\n  const trigger = useScrollTrigger();\r\n  return (\r\n    <Slide appear={false} direction=\"down\" in={!trigger}>\r\n      <AppBar>\r\n        <Toolbar className=\"appbar--toolbar\">\r\n          <Typography variant=\"h6\" component={NavLink} to=\"/\" className=\"appbar--logo\">  News-Comparer</Typography>\r\n          <CustomTabs/>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </Slide>\r\n  );\r\n}\r\n\r\nfunction ScrollTop() {\r\n  const useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      position: \"fixed\",\r\n      bottom: theme.spacing(2),\r\n      right: theme.spacing(2),\r\n      zIndex:800,\r\n    },\r\n\r\n  })\r\n);\r\n  const classes = useStyles();\r\n  const trigger = useScrollTrigger({\r\n    disableHysteresis: true,\r\n    threshold: 100,\r\n  });\r\n\r\n  const handleClick = (event: React.MouseEvent<HTMLDivElement>) => {\r\n    // co to kurwa jest\r\n    const anchor = (\r\n      (event.target as HTMLDivElement).ownerDocument || document\r\n    ).getElementById(\"back-to-top-anchor\");\r\n    console.log(anchor);\r\n    if (anchor) {\r\n      anchor.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Zoom in={trigger}>\r\n      <div onClick={handleClick} role=\"presentation\" className={classes.root}>\r\n        <Fab color=\"secondary\" size=\"small\" aria-label=\"scroll back to top\">\r\n          <KeyboardArrowUpIcon />\r\n        </Fab>\r\n      </div>\r\n    </Zoom>\r\n  );\r\n}\r\n\r\n\r\nexport default function Topbar() {\r\n  return (\r\n    <>\r\n      <HideOnScroll />\r\n      <Toolbar id=\"back-to-top-anchor\" />\r\n      <ScrollTop />\r\n    </>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { WebsiteJointData } from \"../../interfaces\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  useLocation\r\n} from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    button: {\r\n      display: \"block\",\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 160,\r\n    },\r\n    formInpput: {\r\n      minHeight: 70,\r\n    },\r\n  })\r\n);\r\n\r\nexport default function WebsiteSelect({\r\n  websiteSelectData,\r\n  updateFunction,\r\n}: {\r\n  websiteSelectData: WebsiteJointData[];\r\n  updateFunction: (data: boolean | string) => void;\r\n}) {\r\n  const classes = useStyles();\r\n  const [age, setAge] = useState<string | number>(0);\r\n  const [open, setOpen] = useState(false);\r\n  const [toggled, setToggled] = useState(true);\r\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    setAge(event.target.value as number);\r\n    const name = websiteSelectData[event.target.value as number].name;\r\n    updateFunction(name);\r\n  };\r\n\r\n  const handleToggle = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setToggled(event.target.checked);\r\n    updateFunction(event.target.checked);\r\n  };\r\n  let location = useLocation();\r\n \r\n  return (\r\n    <Grid\r\n      item\r\n      xs\r\n      container\r\n      direction=\"column\"\r\n      justify=\"center\"\r\n      alignItems=\"center\"\r\n    >\r\n      <FormControl className={classes.formControl}>\r\n        <Select\r\n          labelId=\"demo-controlled-open-select-label\"\r\n          id=\"demo-controlled-open-select\"\r\n          open={open}\r\n          onClose={() => setOpen(false)}\r\n          onOpen={() => setOpen(true)}\r\n          value={age}\r\n          onChange={handleChange}\r\n          className={classes.formInpput}\r\n        >\r\n          {websiteSelectData.map((item, index) => {\r\n            return (\r\n              <MenuItem value={index} key={index}>\r\n                <img\r\n                  src={`${item.name}_Logo.png`}\r\n                  alt={item.name}\r\n                  className=\"website-selector--image\"\r\n                />\r\n              </MenuItem>\r\n            );\r\n          })}\r\n        </Select>\r\n      </FormControl>\r\n\r\n      {location.pathname !== \"/words\" ? (\r\n        <Switch\r\n          checked={toggled}\r\n          onChange={handleToggle}\r\n          color=\"primary\"\r\n          name=\"checkedB\"\r\n          inputProps={{ \"aria-label\": \"primary checkbox\" }}\r\n        />\r\n      ) : null}\r\n    </Grid>\r\n  );\r\n}\r\n","import React, {\r\n  Dispatch,\r\n  SetStateAction,\r\n  useEffect,\r\n  useState,\r\n  useCallback,\r\n} from \"react\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { createRowObjects } from \"../../firebase/firestore\";\r\nimport {\r\n  WebsiteJointDataMap,\r\n  SelectedWebsites,\r\n  WebsiteJointData,\r\n} from \"../../interfaces\";\r\nimport WebsiteSelect from \"./WebsiteSelector\";\r\nimport { useLocation } from \"react-router\";\r\n\r\nconst WebsiteSelectorGrouping = ({\r\n  webisteJointData,\r\n  setSelectedWebsites,\r\n  selectedWebsites,\r\n}: {\r\n  webisteJointData: WebsiteJointDataMap;\r\n  setSelectedWebsites: Dispatch<SetStateAction<SelectedWebsites>>;\r\n  selectedWebsites: SelectedWebsites;\r\n}) => {\r\n  const [webisteDataInRows, setWebisteDataInRows] = useState<\r\n    WebsiteJointData[][]\r\n  >([[], [], []]);\r\n\r\n  const returnUpdateFunction = useCallback(\r\n    (index: number) => {\r\n      const updateNameAndUrl = (index: number, name: string) => {\r\n        console.log(selectedWebsites);\r\n        const namesCopy = [...selectedWebsites.names];\r\n        const linksCopy = [...selectedWebsites.links];\r\n        namesCopy[index] = name;\r\n        console.log(name, \"NAZWA\");\r\n        linksCopy[index] = webisteJointData[name].url;\r\n        const res = {\r\n          ...selectedWebsites,\r\n          links: linksCopy,\r\n          names: namesCopy,\r\n        };\r\n        console.log(res);\r\n        setSelectedWebsites(res);\r\n      };\r\n\r\n      const updateShow = (index: number, show: boolean) => {\r\n        const showCopy = [...selectedWebsites.show];\r\n        showCopy[index] = show;\r\n        console.log(showCopy, \"kopia\");\r\n        const res = {\r\n          ...selectedWebsites,\r\n          show: showCopy,\r\n        };\r\n\r\n        setSelectedWebsites(res);\r\n      };\r\n\r\n      const x = (data: boolean | string) => {\r\n        if (typeof data === \"string\") {\r\n          updateNameAndUrl(index, data);\r\n        } else {\r\n          updateShow(index, data);\r\n        }\r\n        console.log(\"updated\", selectedWebsites, data, index);\r\n      };\r\n      return x;\r\n    },\r\n    [webisteJointData, selectedWebsites, setSelectedWebsites]\r\n  );\r\n\r\n  // inital setting\r\n\r\n  useEffect(() => {\r\n    console.log(webisteJointData, \"sprawdz\");\r\n    if (Object.keys(webisteJointData).length > 0) {\r\n      console.log(webisteJointData, \"przeszlo\");\r\n      const politicsBasedOnRows = createRowObjects(webisteJointData);\r\n      console.log(politicsBasedOnRows, \"rowy\");\r\n      setWebisteDataInRows(politicsBasedOnRows);\r\n    }\r\n  }, [webisteJointData]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      selectedWebsites.names[0] === \"\" &&\r\n      webisteDataInRows[0].length > 0 &&\r\n      Object.keys(webisteJointData).length > 0\r\n    ) {\r\n      const res: SelectedWebsites = {\r\n        names: [],\r\n        links: [],\r\n        show: [true, true, true],\r\n      };\r\n      const keys = Object.keys(webisteDataInRows);\r\n      keys.forEach((key, index) => {\r\n        // const key =\r\n        const data = webisteDataInRows[index][0];\r\n        console.log(data, \"klucze\");\r\n        res.names.push(data.name);\r\n        res.links.push(data.url);\r\n      });\r\n      setSelectedWebsites(res);\r\n    }\r\n  }, [webisteDataInRows, setSelectedWebsites, webisteJointData]);\r\n  let location = useLocation();\r\n\r\n  return (\r\n    <>\r\n    <Grid\r\n      container\r\n      direction=\"row\"\r\n      alignItems=\"center\"\r\n      className=\"website-selector--wrapper\"\r\n      justifyContent=\"center\"\r\n    >\r\n      {webisteDataInRows[0].length !== 0\r\n        ? webisteDataInRows.map((item, index) => {\r\n            return (\r\n              <WebsiteSelect\r\n                websiteSelectData={item}\r\n                updateFunction={returnUpdateFunction(index)}\r\n              />\r\n            );\r\n          })\r\n        : null}\r\n\r\n  \r\n    </Grid>\r\n        {location.pathname !== \"/words\" && webisteDataInRows[0].length !== 0 ? (\r\n          <p className=\"date-group--date-selector-text\">Toggle visibility of webiste data</p>\r\n        ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WebsiteSelectorGrouping;\r\n","import React, { useEffect } from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport {\r\n  dateToFormatedMonth,\r\n  getNPreviousDates,\r\n  checkIfSameDay,\r\n} from \"../../helpers/dataCreation\";\r\nimport { FringeDates } from \"../../interfaces\";\r\n\r\ninterface mark {\r\n  label: string;\r\n  value: number;\r\n}\r\ninterface pog {\r\n  marks: mark[];\r\n  dates: Date[];\r\n}\r\nexport default function DateSlider({\r\n  fringeDates,\r\n  updateChosenDates,\r\n  chosenDates,\r\n}: {\r\n  chosenDates: FringeDates;\r\n  fringeDates: FringeDates;\r\n  updateChosenDates: (obj: FringeDates) => void;\r\n}) {\r\n  const [value, setValue] = React.useState<number[]>([0, 10]);\r\n\r\n  const [dates, setDates] = React.useState<pog | null>(null);\r\n\r\n  useEffect(() => {\r\n    const getSevenPreviousDays = (): pog => {\r\n      const res = getNPreviousDates(7);\r\n      if (fringeDates?.max.getDay() === new Date().getDay()) {\r\n        res.pop();\r\n      } else {\r\n        res.shift();\r\n      }\r\n      const marks: mark[] = [];\r\n      for (let i = 0; i < 7; i++) {\r\n        marks.push({\r\n          label: dateToFormatedMonth(res[i]),\r\n          value: i * 10,\r\n        });\r\n      }\r\n      return {\r\n        dates: res,\r\n        marks: marks,\r\n      };\r\n    };\r\n\r\n    setDates(getSevenPreviousDays());\r\n  }, [fringeDates]);\r\n  useEffect(() => {\r\n    if (dates) {\r\n      const arr = dates.dates;\r\n      let num1 = 0;\r\n      let num2 = 0;\r\n      const first = arr.map((item) => {\r\n        return checkIfSameDay(item, chosenDates.max);\r\n      });\r\n      const second = arr.map((item) => {\r\n        return checkIfSameDay(item, chosenDates.min);\r\n      });\r\n      const firstIndex = first.indexOf(true);\r\n      const secondIndex = second.indexOf(true);\r\n\r\n      if (firstIndex === -1) {\r\n        num1 = 70;\r\n      } else {\r\n        num1 = firstIndex * 10;\r\n      }\r\n\r\n      if (secondIndex === -1) {\r\n        num2 = 70;\r\n      } else {\r\n        num2 = secondIndex * 10;\r\n      }\r\n\r\n      setValue([num1, num2]);\r\n    }\r\n  }, [chosenDates, dates]);\r\n\r\n  const handleChange = (event: any, newValue: number | number[]) => {\r\n    setValue(newValue as number[]);\r\n  };\r\n  const handleChangeEnd = (event: any, newValue: number | number[]) => {\r\n    setValue(newValue as number[]);\r\n    if (dates) {\r\n      updateChosenDates({\r\n        min: dates.dates[value[1] / 10],\r\n        max: dates.dates[value[0] / 10],\r\n      });\r\n    }\r\n  };\r\n\r\n  const selectAllDates = () => {\r\n    if (fringeDates) {\r\n      updateChosenDates(fringeDates);\r\n    }\r\n  };\r\n  const selectToday = () => {\r\n    if (fringeDates) {\r\n      updateChosenDates({\r\n        max: fringeDates.max,\r\n        min: fringeDates.max,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"slider--wrapper\">\r\n      {dates ? (\r\n        <Slider\r\n          value={value}\r\n          onChange={handleChange}\r\n          onChangeCommitted={handleChangeEnd}\r\n          marks={dates.marks}\r\n          max={60}\r\n          step={10}\r\n        />\r\n      ) : null}\r\n      <div className=\"slider--button-wrapper\">\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={selectAllDates}\r\n          className=\"slider--button\"\r\n        >\r\n          Select all dates\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={selectToday}\r\n          className=\"slider--button\"\r\n        >\r\n          Select newest date\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import \"date-fns\";\r\nimport { useEffect, useState } from \"react\";\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { MaterialUiPickersDate } from \"@material-ui/pickers/typings/date\";\r\n\r\nimport { FringeDates } from \"../../interfaces\";\r\nimport { checkIfSameDay } from \"../../helpers/dataCreation\";\r\n\r\nexport default function DateSelector({\r\n  chosenDates,\r\n  fringeDates,\r\n  updateChosenDates,\r\n}: {\r\n  chosenDates: FringeDates;\r\n  fringeDates: FringeDates;\r\n  updateChosenDates: (obj: FringeDates) => void;\r\n}) {\r\n  const [error, setError] = useState<string>(\"\");\r\n  const [localDates, setLocalDates] = useState<FringeDates>(chosenDates);\r\n\r\n  const handleGenerator = (num: number) => {\r\n    const handleDateChange = (date: MaterialUiPickersDate | null) => {\r\n      if (date !== null) {\r\n        const normalDate = date.toDate();\r\n        let res: FringeDates;\r\n\r\n        if (num === 1) {\r\n          res = {\r\n            min: normalDate,\r\n            max: localDates.max,\r\n          };\r\n        } else {\r\n          res = {\r\n            min: localDates.min,\r\n            max: normalDate,\r\n          };\r\n        }\r\n\r\n        setLocalDates(res);\r\n        console.log(!checkIfSameDay(res.min,res.max))\r\n        if (res.min.getTime() > res.max.getTime() && !checkIfSameDay(res.min,res.max)) {\r\n          // change classes\r\n          setError(\"The date on right should be before the one on the left\");\r\n        } else {\r\n          updateChosenDates(res);\r\n          setError(\"\");\r\n        }\r\n      } else {\r\n        setError(\"\");\r\n      }\r\n    };\r\n    return handleDateChange;\r\n  };\r\n  useEffect(() => {\r\n    setLocalDates(chosenDates);\r\n    if (chosenDates.min.getTime() > chosenDates.max.getTime()) {\r\n      setError(\"First date should be before the one second\");\r\n    } else {\r\n      // user cant select date that is in out of bound hen we have more than 7 heading in DB\r\n      setError(\"\");\r\n    }\r\n  }, [chosenDates]);\r\n  return (\r\n    // TODO ERROR CLASS\r\n    <MuiPickersUtilsProvider utils={MomentUtils}>\r\n      <div className=\"date-selector--picker-wrapper\">\r\n\r\n        <div className=\"date-selector--single-picker-wrapper\">\r\n          <KeyboardDatePicker\r\n            disableToolbar\r\n            variant=\"inline\"\r\n            format=\"DD/MM/yyyy\"\r\n            margin=\"normal\"\r\n            label=\"Start date\"\r\n            value={localDates.min}\r\n            onChange={handleGenerator(1)}\r\n            KeyboardButtonProps={{\r\n              \"aria-label\": \"change date\",\r\n            }}\r\n            maxDate={fringeDates.max}\r\n            minDate={fringeDates.min}\r\n            className={error !== \"\" ? \"date-group--date-selector--error\" : \"\"}\r\n          />\r\n          <p className=\"date-group--date-selector-text\">Choose start date</p>\r\n        </div>\r\n        <div className=\"date-selector--single-picker-wrapper\">\r\n          <KeyboardDatePicker\r\n            disableToolbar\r\n            variant=\"inline\"\r\n            format=\"DD/MM/yyyy\"\r\n            margin=\"normal\"\r\n            label=\"End date\"\r\n            value={localDates.max}\r\n            onChange={handleGenerator(0)}\r\n            KeyboardButtonProps={{\r\n              \"aria-label\": \"change date\",\r\n            }}\r\n            maxDate={fringeDates.max}\r\n            minDate={fringeDates.min}\r\n            // onClose={handleClose}\r\n            className={error !== \"\" ? \"date-group--date-selector--error\" : \"\"}\r\n          />\r\n          <p className=\"date-group--date-selector-text\">Choose end date</p>\r\n        </div>\r\n      </div>\r\n\r\n      <Typography gutterBottom className=\"date-group--date-selector-text--error\"> {error} </Typography>\r\n    </MuiPickersUtilsProvider>\r\n  );\r\n}\r\n","import DateSlider from \"./DateSlider\";\r\nimport DateSelector from \"./DateSelector\";\r\nimport { FringeDates } from \"../../interfaces\";\r\nconst DateGroup = ({\r\n  fringeDates,\r\n  updateChosenDates,\r\n  chosenDates,\r\n}: {\r\n  chosenDates: FringeDates | null;\r\n  fringeDates: FringeDates | null;\r\n  updateChosenDates: (obj: FringeDates) => void;\r\n}) => {\r\n \r\n  return (\r\n    <div className=\"date-selector\">\r\n      {fringeDates && chosenDates ? (\r\n        <>\r\n          <DateSelector\r\n            fringeDates={fringeDates}\r\n            updateChosenDates={updateChosenDates}\r\n            chosenDates={chosenDates}\r\n          />\r\n          <DateSlider\r\n            fringeDates={fringeDates}\r\n            updateChosenDates={updateChosenDates}\r\n            chosenDates={chosenDates}\r\n          />\r\n        </>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DateGroup;\r\n","import {\r\n  formatedYearsFromDates,\r\n} from \"../helpers/dataCreation\";\r\nimport { getStorage, ref, getDownloadURL } from \"firebase/storage\";\r\nimport { ScreenshotsByDate } from \"../interfaces\";\r\n\r\nconst storage = getStorage();\r\n\r\n// return src of image from firebase storage\r\nexport const getImgSrcFromName = async (fileName: string): Promise<string> => {\r\n  const childRef = ref(storage, fileName)\r\n  const trueURL = getDownloadURL(childRef)\r\n    .then((url) => {\r\n      return url;\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"failed fetching\", error);\r\n      return \"none\";\r\n      // Handle any errors\r\n    });\r\n  return trueURL;\r\n};\r\n\r\n\r\nconst getScreenshotURL = async (name: string, formatedDate: string) => {\r\n \r\n  return await getImgSrcFromName(`${name}-${formatedDate}.jpg`);\r\n  \r\n};\r\nexport const getMissingScreenshots = async (\r\n  names: string[],\r\n  dates: Date[],\r\n  currentData: ScreenshotsByDate\r\n) => {\r\n  const toReturn: ScreenshotsByDate = {};\r\n  const formatedDates: string[] = formatedYearsFromDates(dates);\r\n    for(let formatedDate of formatedDates){\r\n    toReturn[formatedDate] = {};\r\n    for(let name of names){\r\n      if (\r\n        currentData[formatedDate] &&\r\n        currentData[formatedDate][name]\r\n      ) {\r\n        // already present so we dont do anything\r\n      } else {\r\n          toReturn[formatedDate][name] = await getScreenshotURL(\r\n            name,\r\n            formatedDate\r\n          );\r\n      }\r\n    }\r\n  }\r\n  return toReturn;\r\n};\r\n","import { WordMap } from \"../interfaces\";\r\n\r\nexport const combineWordMaps = (data: WordMap[]) => {\r\n  const result: WordMap = {}; \r\n  data.forEach((basket) => {\r\n    for (let [key, value] of Object.entries(basket)) {\r\n      if (result[key]) {\r\n        result[key] += value; \r\n      } else {\r\n        result[key] = value;\r\n      }\r\n    }\r\n  });\r\n  return result;\r\n};\r\n\r\nexport const sumOfMapValues = (maps: WordMap[]) => {\r\n  let number = 0;\r\n  for (let i = 0; i < maps.length; i++) {\r\n    const keys = Object.keys(maps[i]);\r\n    for (let index in keys) {\r\n      number += maps[i][keys[index]];\r\n    }\r\n  }\r\n  return number;\r\n};\r\n\r\n\r\nexport const sortKeysByCount = (map:WordMap) : string[]=> {\r\n  const entries = Object.entries(map)\r\n  var sorted = entries.sort(function(a, b) {\r\n    return b[1] - a[1];\r\n  });\r\n  const res = sorted.map((item)=>item[0])\r\n  return res\r\n\r\n}\r\n\r\n","import { getMissingScreenshots } from \"../firebase/storage\";\r\nimport {\r\n  WebsiteJointDataMap,\r\n  HeadingsByDate,\r\n  FringeDates,\r\n  WordMap,\r\n  ScreenshotsByDate,\r\n  DailyWebsitesDataMap,\r\n  NameToWordMap,\r\n  NameToWordMaps,\r\n} from \"../interfaces\";\r\nimport merge from \"deepmerge\";\r\nimport { formatedYearsFromDates, getAllDatesBetween } from \"./dataCreation\";\r\nimport { combineWordMaps } from \"./mapFunctions\";\r\nimport { OptionsMap } from \"../components/Words/WordsInterfaces\";\r\n\r\nexport const checkIfShouldRequest = (\r\n  names: string[],\r\n  dates: Date[],\r\n  screenshotsByDate: ScreenshotsByDate\r\n) => {\r\n  if (names[0] === \"\") {\r\n    return false;\r\n  }\r\n\r\n  const keys = Object.keys(screenshotsByDate);\r\n  const formatedDates = formatedYearsFromDates(dates);\r\n  // if searched data is missing, it fetches data from db\r\n  for (let i = 0; i < formatedDates.length; i++) {\r\n    if (keys.indexOf(formatedDates[i]) === -1) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  for (let date of formatedDates) {\r\n    const dateKeys = Object.keys(screenshotsByDate[date]);\r\n    if (checkIfNamesAreMissing(dateKeys, names)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const checkIfNamesAreMissing = (keys: string[], names: string[]) => {\r\n  for (let name of names) {\r\n    if (keys.indexOf(name) === -1) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const cretaeImagesSources = async (\r\n  names: string[],\r\n  dates: Date[],\r\n  screenshotsByDate: ScreenshotsByDate\r\n) => {\r\n  const missing = await getMissingScreenshots(names, dates, screenshotsByDate);\r\n  const newData = merge(screenshotsByDate, missing);\r\n  return newData;\r\n};\r\n\r\nexport const getSelectedAndAllWordMap = (\r\n  webisteJointDataMap: WebsiteJointDataMap,\r\n  headingMap: HeadingsByDate,\r\n  chosenDates: FringeDates,\r\n  names: string[]\r\n) => {\r\n  const totalMap: NameToWordMap = {};\r\n  const selectedMap: NameToWordMap = {};\r\n\r\n  const allNames = Object.keys(webisteJointDataMap);\r\n\r\n  // stores all the maps and megres themd\r\n  const mapOfArr: NameToWordMaps = {};\r\n  const datesBetween = formatedYearsFromDates(getAllDatesBetween(chosenDates));\r\n\r\n  for (let name of names) {\r\n    selectedMap[name.replace(\"_\", \" \")] = {};\r\n  }\r\n\r\n  for (let name of allNames) {\r\n    totalMap[name.replace(\"_\", \" \")] = {};\r\n    mapOfArr[name] = [];\r\n  }\r\n\r\n  for (const i of datesBetween) {\r\n    try{\r\n      const current: DailyWebsitesDataMap = headingMap[i].totalDailySiteData;\r\n      for (const name in current) {\r\n        mapOfArr[name].push(current[name].pageDailyFrequencyOfWords);\r\n      }\r\n    }catch(e){\r\n\r\n    }\r\n\r\n  }\r\n\r\n  const combinedForTotal: WordMap[] = [];\r\n  const combinedForSelected: WordMap[] = [];\r\n  for (let name of allNames) {\r\n    const combinedForName = combineWordMaps(mapOfArr[name]);\r\n    console.log(name.replace(\"_\", \" \"), \"ZMIENIONE\");\r\n    totalMap[name.replace(\"_\", \" \")] = combinedForName;\r\n    combinedForTotal.push(combinedForName);\r\n    if (selectedMap[name.replace(\"_\", \" \")] !== undefined) {\r\n      selectedMap[name.replace(\"_\", \" \")] = combinedForName;\r\n      combinedForSelected.push(combinedForName);\r\n    }\r\n  }\r\n  totalMap.Total = combineWordMaps(combinedForTotal);\r\n  selectedMap.Total = combineWordMaps(combinedForSelected);\r\n  console.log(selectedMap, totalMap, \"FIN STATE\");\r\n  return { selectedMap, totalMap };\r\n};\r\n\r\nexport const getSuggestions = (wordData: NameToWordMap): OptionsMap => {\r\n  const res: OptionsMap = {};\r\n  for (const name in wordData) {\r\n    res[name] = [];\r\n  }\r\n  const total = wordData[\"Total\"];\r\n  for (const word in total) {\r\n    for (const name in wordData) {\r\n      if (isNaN(Number(word))) {\r\n        let wordCount = wordData[name][word];\r\n        if (wordCount === undefined) {\r\n          wordCount = 0;\r\n        }\r\n        res[name].push({\r\n          word: word,\r\n          count: wordCount,\r\n        });\r\n      }\r\n    }\r\n  }\r\n  return res;\r\n};\r\n","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete, { AutocompleteRenderGroupParams } from '@material-ui/lab/Autocomplete';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport { useTheme, } from '@material-ui/core/styles';\r\nimport { VariableSizeList, ListChildComponentProps } from 'react-window';\r\nimport { Typography } from '@material-ui/core';\r\nimport { Chip } from \"@material-ui/core\";\r\nimport { ChangeEvent } from \"react\";\r\nimport { OptionsMap, WordOption } from \"../Words/WordsInterfaces\";\r\n\r\nconst LISTBOX_PADDING = 8; // px\r\n\r\nfunction renderRow(props: ListChildComponentProps) {\r\n  const { data, index, style } = props;\r\n  return React.cloneElement(data[index], {\r\n    style: {\r\n      ...style,\r\n      top: (style.top as number) + LISTBOX_PADDING,\r\n    },\r\n  });\r\n}\r\n\r\nconst OuterElementContext = React.createContext({});\r\n\r\nconst OuterElementType = React.forwardRef<HTMLDivElement>((props, ref) => {\r\n  const outerProps = React.useContext(OuterElementContext);\r\n  return <div ref={ref} {...props} {...outerProps} />;\r\n});\r\n\r\nfunction useResetCache(data: any) {\r\n  const ref = React.useRef<VariableSizeList>(null);\r\n  React.useEffect(() => {\r\n    if (ref.current != null) {\r\n      ref.current.resetAfterIndex(0, true);\r\n    }\r\n  }, [data]);\r\n  return ref;\r\n}\r\n\r\n// Adapter for react-window\r\nconst ListboxComponent = React.forwardRef<HTMLDivElement>(function ListboxComponent(props, ref) {\r\n  const { children, ...other } = props;\r\n  const itemData = React.Children.toArray(children);\r\n  const theme = useTheme();\r\n  const smUp = useMediaQuery(theme.breakpoints.up('sm'), { noSsr: true });\r\n  const itemCount = itemData.length;\r\n  const itemSize = smUp ? 36 : 40;\r\n\r\n  const getChildSize = (child: React.ReactNode) => {\r\n    if (React.isValidElement(child) && child.type === ListSubheader) {\r\n      return 40;\r\n    }\r\n\r\n    return itemSize;\r\n  };\r\n\r\n  const getHeight = () => {\r\n    if (itemCount > 8) {\r\n      return 8 * itemSize;\r\n    }\r\n    return itemData.map(getChildSize).reduce((a, b) => a + b, 0);\r\n  };\r\n\r\n  const gridRef = useResetCache(itemCount);\r\n\r\n  return (\r\n    <div ref={ref}>\r\n      <OuterElementContext.Provider value={other}>\r\n        <VariableSizeList\r\n          itemData={itemData}\r\n          height={getHeight() + 2 * LISTBOX_PADDING}\r\n          width=\"100%\"\r\n          ref={gridRef}\r\n          outerElementType={OuterElementType}\r\n          innerElementType=\"ul\"\r\n          itemSize={(index) => getChildSize(itemData[index])}\r\n          overscanCount={5}\r\n          itemCount={itemCount}\r\n          className=\"remove-scroll\"\r\n        >\r\n          {renderRow}\r\n        </VariableSizeList>\r\n      </OuterElementContext.Provider>\r\n    </div>\r\n  );\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default function VirtualizedAutoComplete({suggestions,\r\n  stateChange,\r\n  label,}:{ suggestions: OptionsMap;\r\n    stateChange: React.Dispatch<React.SetStateAction<string[]>>;\r\n    label: string;\r\n}) {\r\n\r\n  const handleChange = (\r\n    event: ChangeEvent<{}>,\r\n    value: (string | WordOption)[]\r\n  ) => {\r\n    // console.log(event,value, \"XDD\")f\r\n    const words: string[] = [];\r\n    for (let x of value) {\r\n      if (typeof x === \"string\") {\r\n        words.push(x.toLowerCase());\r\n      } else {\r\n        words.push(x.word.toLowerCase());\r\n      }\r\n    }\r\n    stateChange(words);\r\n  };\r\n  return (\r\n    <Autocomplete\r\n    debug\r\n      id=\"virtualize-demo\"\r\n      style={{ width: 300 }}\r\n      disableListWrap\r\n      multiple\r\n      freeSolo={true}\r\n      ListboxComponent={ListboxComponent as React.ComponentType<React.HTMLAttributes<HTMLElement>>}\r\n      options={suggestions.Total.map((item) => item.word)}\r\n      renderInput={(params) => (\r\n        <TextField {...params} label={label} variant=\"outlined\" />\r\n      )}\r\n      renderOption={(option) => <Typography noWrap>{option}</Typography>}\r\n      onChange={handleChange}\r\n\r\n      renderTags={(value: string[], getTagProps) =>\r\n        value.map((option: string, index: number) => (\r\n          <Chip\r\n            variant=\"outlined\"\r\n            label={option}\r\n            {...getTagProps({ index })}\r\n          />\r\n        ))\r\n\r\n      }\r\n      \r\n    />\r\n  );\r\n}","\r\nimport {\r\n  TotalGraphData,\r\n  AnyMap,\r\n  NameToWordMap,\r\n} from \"../../interfaces\";\r\n\r\nexport const getFormatedDataToGraph = (\r\n  totalData: TotalGraphData,\r\n  selected: [string, number][]\r\n) => {\r\n  const keys = Object.keys(totalData);\r\n  const res: AnyMap[] = [];\r\n  selected.forEach((entry) => {\r\n    const word = entry[0];\r\n    const capitalizedWord =\r\n      word.charAt(0).toUpperCase() + word.slice(1, word.length);\r\n    const tempObj: AnyMap = {\r\n      word: capitalizedWord,\r\n    };\r\n    keys.forEach((key) => {\r\n      let count = 0;\r\n      // console.log(totalData[key], \"BUM\");\r\n      if (totalData[key].frequencyOfWords[word] !== undefined) {\r\n        count = totalData[key].frequencyOfWords[word];\r\n      }\r\n      tempObj[key] = count;\r\n    });\r\n    res.push({\r\n      ...tempObj,\r\n    });\r\n  });\r\n  // console.log(res, \"RES\");\r\n  return res;\r\n};\r\n\r\n\r\n\r\nexport const getNamesFromGraphData = (data: NameToWordMap): string[] => {\r\n  const names = Object.keys(data);\r\n  return names.filter((item) => {\r\n    return  item !== \"word\";\r\n  });\r\n};\r\n\r\n","import { useState, useEffect } from \"react\";\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\nimport { AnyMap, NameToWordMap, WebsiteJointDataMap } from \"../../interfaces\";\r\nimport { getNamesFromGraphData } from \"./WordsFunctions\";\r\n\r\nconst Graph = ({\r\n  data,\r\n  webisteJointDataMap,\r\n  wordOrder,\r\n  wordCount,\r\n}: {\r\n  data: NameToWordMap;\r\n  webisteJointDataMap: WebsiteJointDataMap;\r\n  wordOrder: string[];\r\n  wordCount: number;\r\n}) => {\r\n  const [graphData, setGraphData] = useState<AnyMap[]>([]);\r\n  useEffect(() => {\r\n    const res: AnyMap[] = [];\r\n    const names = getNamesFromGraphData(data);\r\n\r\n    for (let i = 0; i < wordCount; i++) {\r\n      const currentWord = wordOrder[i];\r\n      const currentGraphMap: AnyMap = { word: currentWord };\r\n      for (const name of names) {\r\n        const wordCount =\r\n          data[name][currentWord] !== undefined ? data[name][currentWord] : 0;\r\n        currentGraphMap[name] = wordCount;\r\n      }\r\n      res.push(currentGraphMap);\r\n    }\r\n    // console.log(res, \"graf\");\r\n    setGraphData(res);\r\n  }, [data, wordCount, wordOrder]);\r\n\r\n  return (\r\n    <>\r\n      {graphData.length > 0 ? (\r\n        <ResponsiveContainer\r\n          height={\r\n            (Object.keys(graphData[0]).length - 1) * graphData.length * 40\r\n          }\r\n          width=\"100%\"\r\n          className=\"words--desktop-graph\"\r\n        >\r\n          <BarChart\r\n            data={graphData}\r\n            margin={{ top: 5, right: 0, left: 0, bottom: 5 }}\r\n            layout=\"vertical\"\r\n          >\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <YAxis dataKey=\"word\" type=\"category\" width={150} />\r\n            <XAxis type=\"number\" allowDecimals={false} />\r\n            <Tooltip />\r\n            <Legend />\r\n            {graphData.length > 0\r\n              ? getNamesFromGraphData(data).map((name, index) => {\r\n                  return (\r\n                    <Bar\r\n                      layout=\"vertical\"\r\n                      dataKey={name}\r\n                      fill={`#${\r\n                        webisteJointDataMap[name.replace(\" \", \"_\")]\r\n                          ? webisteJointDataMap[name.replace(\" \", \"_\")].color\r\n                          : \"38AE1A\"\r\n                      }`}\r\n                      key={index}\r\n                    />\r\n                  );\r\n                })\r\n              : null}\r\n          </BarChart>\r\n        </ResponsiveContainer>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n","import {\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\nimport { AnyMap, NameToWordMap, WebsiteJointDataMap } from \"../../interfaces\";\r\nimport { getNamesFromGraphData } from \"./WordsFunctions\";\r\n\r\nconst MobileGraph = ({\r\n  data,\r\n  webisteJointDataMap,\r\n  passedData,\r\n}: {\r\n  data: NameToWordMap;\r\n  webisteJointDataMap: WebsiteJointDataMap;\r\n  passedData: AnyMap[];\r\n}) => {\r\n  return (\r\n    <>\r\n      {passedData.length > 0 ? (\r\n        <ResponsiveContainer\r\n          height={250}\r\n          width=\"100%\"\r\n          className=\"words--mobile-graph\"\r\n        >\r\n          <BarChart\r\n            data={passedData}\r\n            margin={{ top: 5, right: 10, left: 10, bottom: 5 }}\r\n          >\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n\r\n            <XAxis dataKey=\"word\" />\r\n            <YAxis allowDecimals={false} />\r\n            <Tooltip />\r\n            <Legend />\r\n            {passedData.length > 0\r\n              ? getNamesFromGraphData(data).map((name, index) => {\r\n                  return (\r\n                    <Bar\r\n                      dataKey={name}\r\n                      fill={`#${\r\n                        webisteJointDataMap[name.replace(\" \", \"_\")]\r\n                          ? webisteJointDataMap[name.replace(\" \", \"_\")].color\r\n                          : \"38AE1A\"\r\n                      }`}\r\n                      key={index}\r\n                    />\r\n                  );\r\n                })\r\n              : null}\r\n          </BarChart>\r\n        </ResponsiveContainer>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MobileGraph;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nimport { AnyMap, NameToWordMap, WebsiteJointDataMap } from \"../../interfaces\";\r\nimport MobileGraph from \"./MobileGraph\";\r\nimport { getNamesFromGraphData } from \"./WordsFunctions\";\r\n\r\nconst MobileGraphs = ({\r\n  data,\r\n  webisteJointDataMap,\r\n  wordOrder,\r\n  wordCount,\r\n}: {\r\n  data: NameToWordMap;\r\n  webisteJointDataMap: WebsiteJointDataMap;\r\n  wordOrder: string[];\r\n  wordCount: number;\r\n}) => {\r\n  const [graphData, setGraphData] = useState<AnyMap[]>([]);\r\n  useEffect(() => {\r\n    const res: AnyMap[] = [];\r\n    const names = getNamesFromGraphData(data);\r\n\r\n    // console.log(names, data, \"XD\");\r\n    for (let i = 0; i < wordCount; i++) {\r\n      const currentWord = wordOrder[i];\r\n      const currentGraphMap: AnyMap = { word: currentWord };\r\n      for (const name of names) {\r\n        const wordCount =\r\n          data[name][currentWord] !== undefined ? data[name][currentWord] : 0;\r\n        currentGraphMap[name] = wordCount;\r\n      }\r\n      res.push(currentGraphMap);\r\n    }\r\n    // console.log(res, \"graf\");\r\n    setGraphData(res);\r\n  }, [data, wordCount, wordOrder]);\r\n\r\n  return (\r\n    <>\r\n      {graphData.map((data, index) => {\r\n        return (\r\n          <MobileGraph\r\n            data={data}\r\n            key={index}\r\n            webisteJointDataMap={webisteJointDataMap}\r\n            passedData={[data]}\r\n          />\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MobileGraphs;\r\n","import { useEffect, useState } from \"react\";\r\nimport { NameToWordMap, WebsiteJointDataMap } from \"../../interfaces\";\r\nimport VirtualizedAutoComplete from \"../General/VirtualizedAutoComplete\";\r\nimport Graph from \"./Graph\";\r\nimport MobileGraphs from \"./MobileGraphs\";\r\nimport { OptionsMap } from \"./WordsInterfaces\";\r\n\r\nconst WordCompare = ({\r\n  wordDataOfAll,\r\n  wordDataOfSelected,\r\n  webisteJointDataMap,\r\n  suggestions,\r\n}: {\r\n  wordDataOfAll: NameToWordMap;\r\n  wordDataOfSelected: NameToWordMap;\r\n  webisteJointDataMap: WebsiteJointDataMap;\r\n  suggestions: OptionsMap;\r\n}) => {\r\n  const [selectedWord, setSelectedWords] = useState<string[]>([]);\r\n  const [graphDataOfAll, setGraphDataOfAll] = useState<NameToWordMap>({});\r\n  const [graphDataOfSelected, setGrapDataOfSelected] = useState<NameToWordMap>(\r\n    {}\r\n  );\r\n\r\n  useEffect(() => {\r\n    // change to functions i guess\r\n    const allNames = Object.keys(wordDataOfAll);\r\n    const selectedNames = Object.keys(wordDataOfSelected);\r\n    const allRes: NameToWordMap = {};\r\n    const selectedRes: NameToWordMap = {};\r\n    for (let name of allNames) {\r\n      allRes[name] = {};\r\n    }\r\n    for (let name of selectedNames) {\r\n      selectedRes[name] = {};\r\n    }\r\n\r\n    for (const word of selectedWord) {\r\n      for (let name of allNames) {\r\n        allRes[name][word] = wordDataOfAll[name][word];\r\n      }\r\n      for (let name of selectedNames) {\r\n        selectedRes[name][word] = wordDataOfSelected[name][word];\r\n      }\r\n    }\r\n\r\n    setGrapDataOfSelected(selectedRes);\r\n    setGraphDataOfAll(allRes);\r\n  }, [selectedWord, wordDataOfSelected, wordDataOfAll]);\r\n\r\n  return (\r\n    <div className=\"words--compare-container\">\r\n      {suggestions.Total ? (\r\n        <>\r\n          <div className=\"words--compare-input-wrapper\">\r\n            <p className=\"words--compare-text\">\r\n              View graphs for selected words\r\n            </p>\r\n\r\n          \r\n            <VirtualizedAutoComplete\r\n              suggestions={suggestions}\r\n              stateChange={setSelectedWords}\r\n              label=\"View data for selected words\"\r\n            />\r\n          </div>\r\n\r\n          <Graph\r\n            data={graphDataOfSelected}\r\n            webisteJointDataMap={webisteJointDataMap}\r\n            wordOrder={selectedWord}\r\n            wordCount={selectedWord.length}\r\n          />\r\n\r\n          <Graph\r\n            data={graphDataOfAll}\r\n            webisteJointDataMap={webisteJointDataMap}\r\n            wordOrder={selectedWord}\r\n            wordCount={selectedWord.length}\r\n          />\r\n          <MobileGraphs\r\n            data={graphDataOfSelected}\r\n            webisteJointDataMap={webisteJointDataMap}\r\n            wordOrder={selectedWord}\r\n            wordCount={selectedWord.length}\r\n          />\r\n          <MobileGraphs\r\n            data={graphDataOfAll}\r\n            webisteJointDataMap={webisteJointDataMap}\r\n            wordOrder={selectedWord}\r\n            wordCount={selectedWord.length}\r\n          />\r\n        </>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WordCompare;\r\n","import  { ChangeEvent, Dispatch, SetStateAction } from \"react\";\r\nimport Slider from '@material-ui/core/Slider';\r\n\r\n\r\n\r\nfunction valuetext(value: number) {\r\n  return `${value}°C`;\r\n}\r\n\r\nexport default function DiscreteSlider({\r\n    value,\r\n    setValue,\r\n  }: {\r\n    value: number;\r\n    setValue: Dispatch<SetStateAction<number>>;\r\n  }) {\r\n    const handleChange = (e:ChangeEvent<{}>,val:number|number[])=>{\r\n      if(typeof val ===\"number\"){\r\n        setValue(val)\r\n      }else{\r\n        console.error(\"it shouldnt print\")\r\n      }\r\n    }\r\n  return (\r\n    <div className=\"words--slider\">\r\n      <p className=\"words--slider-text\">\r\n        Select amount of words to show\r\n      </p>\r\n      <Slider\r\n        defaultValue={1}\r\n        getAriaValueText={valuetext}\r\n        aria-labelledby=\"discrete-slider\"\r\n        aria-label=\"amount of word to show on a graph\"\r\n        valueLabelDisplay=\"on\"\r\n        step={1}\r\n        onChange={handleChange}\r\n        marks\r\n        min={1}\r\n        max={20}\r\n      />\r\n    </div>\r\n  );\r\n}","import { useState } from \"react\";\r\nimport { NameToWordMap, WebsiteJointDataMap } from \"../../interfaces\";\r\nimport Graph from \"./Graph\";\r\nimport MobileGraphs from \"./MobileGraphs\";\r\n\r\nimport WordSlider from \"./WordSlider\";\r\n\r\nconst GraphsByPopularity = ({\r\n  wordDataOfAll,\r\n  wordDataOfSelected,\r\n  webisteJointDataMap,\r\n  sortedSelectedWordsByCount,\r\n  sortedAllWordsByCount,\r\n}: {\r\n  wordDataOfAll: NameToWordMap;\r\n  wordDataOfSelected: NameToWordMap;\r\n  webisteJointDataMap: WebsiteJointDataMap;\r\n  sortedSelectedWordsByCount: string[];\r\n  sortedAllWordsByCount: string[];\r\n}) => {\r\n  const [value, setValue] = useState<number>(1);\r\n\r\n  return (\r\n    <div className=\"words--popularity-container\">\r\n      <WordSlider value={value} setValue={setValue} />\r\n      {Object.keys(wordDataOfAll).length > 0 &&\r\n      sortedSelectedWordsByCount.length > 0 ? (\r\n        <>\r\n          <Graph\r\n            data={wordDataOfSelected}\r\n            webisteJointDataMap={webisteJointDataMap}\r\n            wordOrder={sortedSelectedWordsByCount}\r\n            wordCount={value}\r\n          />\r\n\r\n          <Graph\r\n            data={wordDataOfAll}\r\n            webisteJointDataMap={webisteJointDataMap}\r\n            wordOrder={sortedAllWordsByCount}\r\n            wordCount={value}\r\n          />\r\n\r\n          <MobileGraphs\r\n            data={wordDataOfSelected}\r\n            webisteJointDataMap={webisteJointDataMap}\r\n            wordOrder={sortedSelectedWordsByCount}\r\n            wordCount={value}\r\n          />\r\n          <MobileGraphs\r\n            data={wordDataOfAll}\r\n            webisteJointDataMap={webisteJointDataMap}\r\n            wordOrder={sortedAllWordsByCount}\r\n            wordCount={value}\r\n          />\r\n        </>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphsByPopularity;\r\n","import { useEffect, useState } from \"react\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport {\r\n  WebsiteJointDataMap,\r\n  DailyWebsitesDataMap,\r\n  NameToWordMap,\r\n  NameToWordMaps,\r\n} from \"../../interfaces\";\r\nimport { sortKeysByCount } from \"../../helpers/mapFunctions\";\r\nimport { OptionsMap } from \"./WordsInterfaces\";\r\n\r\nimport WordCompare from \"./WordCompare\";\r\nimport GraphsByPopularity from \"./GraphsByPopularity\";\r\nconst Words = ({\r\n  webisteJointData,\r\n  wordDataOfAll,\r\n  wordDataOfSelected,\r\n  suggestions,\r\n}: {\r\n  webisteJointData: WebsiteJointDataMap;\r\n  wordDataOfAll: NameToWordMap;\r\n  wordDataOfSelected: NameToWordMap;\r\n  suggestions: OptionsMap;\r\n}) => {\r\n  const [sortedSelectedWordsByCount, setSortedSelectedByCount] = useState<\r\n    string[]\r\n  >([]);\r\n  const [sortedAllWordsByCount, setSortedAllByCount] = useState<string[]>([]);\r\n\r\n  useEffect(() => {\r\n    // two states, one for all pagesand one for those selected\r\n    setSortedSelectedByCount(sortKeysByCount(wordDataOfSelected.Total));\r\n    setSortedAllByCount(sortKeysByCount(wordDataOfAll.Total));\r\n  }, [wordDataOfAll, wordDataOfSelected]);\r\n\r\n  return (\r\n    <Grid className=\"words--container\">\r\n      {/* some kind of switch to chnage what is displayed */}\r\n      <GraphsByPopularity\r\n        wordDataOfAll={wordDataOfAll}\r\n        wordDataOfSelected={wordDataOfSelected}\r\n        webisteJointDataMap={webisteJointData}\r\n        sortedSelectedWordsByCount={sortedSelectedWordsByCount}\r\n        sortedAllWordsByCount={sortedAllWordsByCount}\r\n      />\r\n      \r\n      <WordCompare\r\n        suggestions={suggestions}\r\n        wordDataOfAll={wordDataOfAll}\r\n        wordDataOfSelected={wordDataOfSelected}\r\n        webisteJointDataMap={webisteJointData}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\nexport default Words;\r\n","import {\r\n  formatedYearsFromDates,\r\n  getAllDatesBetween,\r\n} from \"../../helpers/dataCreation\";\r\nimport {\r\n  FringeDates,\r\n  HeadingsByDate,\r\n  Heading,\r\n  WordMap,\r\n} from \"../../interfaces\";\r\nexport interface HeadingRow {\r\n  [name: string]: string | Heading[];\r\n  date: string;\r\n}\r\n\r\nexport const getSelectedHeadings = (\r\n  names: string[],\r\n  dates: FringeDates,\r\n  totalData: HeadingsByDate\r\n) => {\r\n  const res: HeadingRow[] = [];\r\n  const formatedDates = formatedYearsFromDates(getAllDatesBetween(dates));\r\n  console.log(formatedDates, names);\r\n  formatedDates.forEach((date) => {\r\n    let tempObj: HeadingRow = { date };\r\n    if (totalData[date]) {\r\n      const siteData = totalData[date].totalDailySiteData;\r\n\r\n      // console.log(siteData, \"XD\");\r\n      for (let index in names) {\r\n        const name = names[index];\r\n        // console.log(name, siteData, \"PRZED\");\r\n        const data = siteData[name];\r\n        tempObj[name] = data.headings;\r\n      }\r\n\r\n      res.push({ ...tempObj });\r\n    }\r\n  });\r\n  // console.log(res, \"kkoniec\");\r\n  return res;\r\n};\r\n\r\nexport const checkIfContainsWords = (headingText: string, words: string[]) => {\r\n  // changin to map\r\n  if (!words.length || words.length === 0) {\r\n    return true;\r\n  }\r\n\r\n  const splitHeading = headingText.split(\" \").map((item) => item.toLowerCase());\r\n  // console.log(splitHeading);\r\n  for (const word of splitHeading) {\r\n    for (const searchedWord of words) {\r\n      // if (word.indexOf(searchedWord) >= 0) {\r\n      //   return true;\r\n      // }\r\n      if (word === searchedWord) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n","import { ListItem, Link } from \"@material-ui/core/\";\r\nimport Skeleton from \"@material-ui/lab/Skeleton\";\r\nconst SingleHeading = ({\r\n  src,\r\n  href,\r\n  text,\r\n}: {\r\n  src: string | undefined;\r\n  href: string;\r\n  text: string;\r\n}) => {\r\n  return (\r\n    <ListItem className=\"headings--list-item\" button>\r\n      <Link href={href} className=\"headings--link\">\r\n        {src === undefined || src === \"\" ? (\r\n          <Skeleton variant=\"rect\" height={200} />\r\n        ) : src === \"none\" ? null : (\r\n          <img\r\n            id={href}\r\n            className=\"headings--image\"\r\n            src={src}\r\n            alt=\"original article illustration\"\r\n            onError={(e) => {\r\n              // makes it that when image src in invalid, the image component is not shown\r\n              console.log(\"fired\");\r\n              document.getElementById(href)?.classList.add(\"hide\");\r\n            }}\r\n          />\r\n        )}\r\n        <p className=\"headings--text\">{text}</p>\r\n      </Link>\r\n    </ListItem>\r\n  );\r\n};\r\n\r\nexport default SingleHeading;\r\n","import react from \"react\"\r\nimport { Heading, WordToWordMap } from \"../../interfaces\";\r\nimport { checkIfContainsWords } from \"./HeadingsFunctions\";\r\nimport SingleHeading from \"./SingleHeading\";\r\nimport PageLogoLink from \"../General/PageLogoLink\";\r\n\r\nconst HeadingCell = ({\r\n  headings,\r\n  downloadedHeadingImages,\r\n  selectedWords,\r\n  name,\r\n  link\r\n}: {\r\n  headings: Heading[];\r\n  downloadedHeadingImages: WordToWordMap;\r\n  selectedWords:string[];\r\nname:string;\r\nlink:string\r\n}) => {\r\n  return (\r\n    <ul className=\"headings--list\">\r\n       <PageLogoLink name={name} link={link}/>\r\n\r\n      {headings.map((item, index) => {\r\n        return (\r\n          <react.Fragment key={index}>\r\n            {checkIfContainsWords(headings[index].text, selectedWords) ? (\r\n              <SingleHeading\r\n                key={index}\r\n                src={downloadedHeadingImages[headings[index].image]}\r\n                href={headings[index].link}\r\n                text={headings[index].text}\r\n              />\r\n            ) : null}\r\n          </react.Fragment>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default HeadingCell;\r\n","import { HeadingRow } from \"./HeadingsFunctions\";\r\nimport HeadingCell from \"./HeadingCell\";\r\nimport { WordToWordMap, SelectedWebsites } from \"../../interfaces\";\r\nconst HeadingsRow = ({\r\n  headingsRow,\r\n  selectedWebsites,\r\n  downloadedHeadingImages,\r\n  selectedWords,\r\n}: {\r\n  headingsRow: HeadingRow;\r\n  selectedWebsites: SelectedWebsites;\r\n  downloadedHeadingImages: WordToWordMap;\r\n  selectedWords: string[];\r\n}) => {\r\n  // add placeholders\r\n  return (\r\n    <div className=\"headings-row-container\">\r\n      <p className=\"headings--date\">{headingsRow.date}</p>\r\n      <div className=\"headings--inner-container\">\r\n        {selectedWebsites.names.map((name, index) => {\r\n          const pog = headingsRow[name];\r\n          return typeof pog !== \"string\" &&\r\n            typeof pog !== \"undefined\" &&\r\n            selectedWebsites.show[index] ? (\r\n            <HeadingCell\r\n              selectedWords={selectedWords}\r\n              name={name}\r\n              headings={pog}\r\n              key={index}\r\n              downloadedHeadingImages={downloadedHeadingImages}\r\n              link={selectedWebsites.links[index]}\r\n            />\r\n          ) : null;\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HeadingsRow;\r\n","import React, { useEffect, useState, Dispatch, SetStateAction } from \"react\";\r\nimport {\r\n  HeadingsByDate,\r\n  FringeDates,\r\n  WordToWordMap,\r\n  SelectedWebsites,\r\n} from \"../../interfaces\";\r\nimport HeadingsRow from \"./HeadingsRow\";\r\nimport { HeadingRow, getSelectedHeadings } from \"./HeadingsFunctions\";\r\nimport { getImgSrcFromName } from \"../../firebase/storage\";\r\nimport VirtualizedAutoComplete from \"../General/VirtualizedAutoComplete\";\r\nimport { OptionsMap } from \"../Words/WordsInterfaces\";\r\nimport ShowMoreButton from \"../General/ShowMoreButton\";\r\nimport { reverseArrayInPlace } from \"../../helpers/generalHelpers\";\r\nconst Headings = ({\r\n  chosenDates,\r\n  headingMap,\r\n  downloadedHeadingImages,\r\n  setDowloadedHeadingImages,\r\n  suggestions,\r\n  selectedWebsites,\r\n}: {\r\n  chosenDates: FringeDates;\r\n  headingMap: HeadingsByDate;\r\n  downloadedHeadingImages: WordToWordMap;\r\n  setDowloadedHeadingImages: Dispatch<SetStateAction<WordToWordMap>>;\r\n  suggestions: OptionsMap;\r\n  selectedWebsites: SelectedWebsites;\r\n}) => {\r\n  const [columnHeadingData, setColumnHeadingData] = useState<HeadingRow[]>([]);\r\n  const [selectedWords, setSelectedWords] = useState<string[]>([]);\r\n  const [displayedCount, setDisplayedCount] = useState<number>(2);\r\n  useEffect(() => {\r\n    // sets columnHeadingData to have only chosen dates\r\n    const res = reverseArrayInPlace(\r\n      getSelectedHeadings(selectedWebsites.names, chosenDates, headingMap)\r\n    );\r\n    // console.log(res, \"headins\");\r\n    setColumnHeadingData(res);\r\n  }, [selectedWebsites.names, chosenDates, headingMap]);\r\n\r\n  useEffect(() => {\r\n    const getURLPair = async (src: string) => {\r\n      // pair of true storgae url and url stored in headings\r\n      let trueUrl = \"none\";\r\n      if (src !== \"\") {\r\n        trueUrl = await getImgSrcFromName(src);\r\n      }\r\n      const res: WordToWordMap = {};\r\n      res[src] = trueUrl;\r\n      return res;\r\n    };\r\n\r\n    const downloadAndCacheImages = () => {\r\n      const promisesOfTrueURLS: (Promise<WordToWordMap> | WordToWordMap)[] = [];\r\n      for (let headingsRow of columnHeadingData) {\r\n        for (let name of selectedWebsites.names) {\r\n          const headings = headingsRow[name];\r\n          if (typeof headings === \"string\") {\r\n            continue;\r\n          }\r\n          for (let heading of headings) {\r\n            let src = heading.image;\r\n            if (downloadedHeadingImages[src] === undefined) {\r\n              const halo = getURLPair(src);\r\n              promisesOfTrueURLS.push(halo);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      Promise.all(promisesOfTrueURLS).then((trueURLS) => {\r\n        // merging all the urls adn updating the state\r\n        const megaMap: WordToWordMap = Object.assign({}, ...trueURLS);\r\n        setDowloadedHeadingImages({\r\n          ...downloadedHeadingImages,\r\n          ...megaMap,\r\n        });\r\n      });\r\n    };\r\n    downloadAndCacheImages();\r\n  }, [setDowloadedHeadingImages, columnHeadingData]);\r\n\r\n  return (\r\n    <div className=\"headings\">\r\n      <p className=\"headings--tip\">Scroll collumns to see more headings</p>\r\n\r\n      {columnHeadingData.map((row, index) => {\r\n        return (\r\n          <React.Fragment key={index}>\r\n            {index <= displayedCount ? (\r\n              <HeadingsRow\r\n                headingsRow={row}\r\n                key={index}\r\n                selectedWebsites={selectedWebsites}\r\n                downloadedHeadingImages={downloadedHeadingImages}\r\n                selectedWords={selectedWords}\r\n              />\r\n            ) : null}\r\n          </React.Fragment>\r\n        );\r\n      })}\r\n      <VirtualizedAutoComplete\r\n        suggestions={suggestions}\r\n        stateChange={setSelectedWords}\r\n        label=\"Filter headings by words\"\r\n      />\r\n\r\n      <ShowMoreButton\r\n        state={displayedCount}\r\n        setState={setDisplayedCount}\r\n        className=\"\"\r\n        max={columnHeadingData.length}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Headings;\r\n","import { useEffect, useState } from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport {\r\n  WebsiteJointDataMap,\r\n  FringeDates,\r\n  HeadingsByDate,\r\n  ScreenshotsByDate,\r\n  WordToWordMap,\r\n  NameToWordMap,\r\n  SelectedWebsites,\r\n} from \"./interfaces\";\r\nimport {\r\n  fetchStaticWebsiteDataMap,\r\n  getHeadingDailyData,\r\n} from \"./firebase/firestore\";\r\nimport FullScreen from \"./components/FullScreen/FullScreen\";\r\nimport Screenshots from \"./components/Screenshots/Screenshots\";\r\nimport Topbar from \"./components/Topbar/Topbar\";\r\nimport WebsiteSelectorGrouping from \"./components/WebsiteSelector/WebsiteSelectorGrouping\";\r\nimport DateGroup from \"./components/DateSelector/DateGroup\";\r\nimport {\r\n  returnMaxAndMinDateFromKeys,\r\n  getAllDatesBetween,\r\n} from \"./helpers/dataCreation\";\r\nimport {\r\n  cretaeImagesSources,\r\n  getSelectedAndAllWordMap,\r\n  getSuggestions,\r\n} from \"./helpers/stateHelpers\";\r\nimport Words from \"./components/Words/Words\";\r\nimport Headings from \"./components/Headings/Headings\";\r\nimport { OptionsMap } from \"./components/Words/WordsInterfaces\";\r\n\r\nfunction App() {\r\n  // image shown when clicking on screenshot\r\n  const [fullScreenImage, setFullScreenImage] = useState(\"\");\r\n  const [selectedWebsites,setSelectedWebsites] = useState<SelectedWebsites>({\r\n    show:[false,false,false],\r\n    names:[\"\", \"\", \"\"],\r\n    links:[\"\", \"\", \"\"]\r\n  })\r\n  // map of for headings and screenshot data for webistes\r\n  const [screenshotsByDate, setScreenshotsByDate] = useState<ScreenshotsByDate>(\r\n    {}\r\n  );\r\n  const [webisteJointData, setWebisteJointData] = useState<WebsiteJointDataMap>(\r\n    {}\r\n  );\r\n  // headings data based, formtated dates serve as keys\r\n  const [headingMap, setHeadingMap] = useState<HeadingsByDate>({});\r\n  // fringe - based on databse, chosen - based on user input\r\n  const [fringeDates, setFringeDates] = useState<FringeDates | null>(null);\r\n  const [chosenDates, setChosenDates] = useState<FringeDates | null>(null);\r\n  // used to prevent needless fetching of iamges in Headings\r\n  const [downloadedHeadingImages, setDowloadedHeadingImages] =\r\n    useState<WordToWordMap>({});\r\n  // word data for websites, prevents needless expensive calculations\r\n  const [wordDataOfAll, setWordDataOfAll] = useState<NameToWordMap>({});\r\n  const [wordDataOfSelected, setWordDataOfSelected] = useState<NameToWordMap>(\r\n    {}\r\n  );\r\n  // suggesstions for autocomplete components\r\n  const [selectedSuggsetions, setSelectedSuggsetions] = useState<OptionsMap>(\r\n    {}\r\n  );\r\n  const [allSuggsetions, setAllSuggsetions] = useState<OptionsMap>({});\r\n\r\n  // FUNCTIONS\r\n  // changes selected fullscreen image and restes the scroll position\r\n  const setFellScreenAndResetPosition = (src: string) => {\r\n    const fullScreenImage = document.getElementById(\"fullScreenImage\");\r\n    fullScreenImage?.classList.toggle(\"fullScreen--image-off\");\r\n    setFullScreenImage(src);\r\n  };\r\n\r\n  // EFFECTS //\r\n\r\n  // fetches static data and inital date constraints and inital names\r\n  useEffect(() => {\r\n    const updateFringesBasedOnHeadigs = (headings: HeadingsByDate) => {\r\n      console.log(headings,\"headins\")\r\n      const maxAndMin = returnMaxAndMinDateFromKeys(headings);\r\n      setFringeDates(maxAndMin);\r\n      setChosenDates({\r\n        max: maxAndMin.max,\r\n        min: maxAndMin.min,\r\n      });\r\n    };\r\n\r\n    const fetchAndSetStaticStates = async () => {\r\n      const headings = await getHeadingDailyData();\r\n      const totalWebisteMap = await fetchStaticWebsiteDataMap();\r\n      if (headings !== null && totalWebisteMap !== null) {\r\n        setWebisteJointData(totalWebisteMap);\r\n\r\n        updateFringesBasedOnHeadigs(headings);\r\n        setHeadingMap(headings);  \r\n\r\n        console.log(1111, \"update\", headings);\r\n      } else {\r\n        console.error(\"Failed to fetch data from database\");\r\n      }\r\n    };\r\n    console.log(\"XD\")\r\n    fetchAndSetStaticStates();\r\n  }, []);\r\n\r\n  \r\n  // gets true urls of images and saves them\r\n  useEffect(() => {\r\n    const updateSreenshots = async () => {\r\n\r\n      if (chosenDates && selectedWebsites.names[0] !== \"\") {\r\n        const dates = getAllDatesBetween(chosenDates);\r\n        const newData = await cretaeImagesSources(\r\n          selectedWebsites.names,\r\n          dates,\r\n          screenshotsByDate\r\n        );\r\n        setScreenshotsByDate(newData);\r\n      }\r\n    };\r\n\r\n    updateSreenshots();\r\n    // inclusion of all of them creates infinite loop\r\n  }, [selectedWebsites.names, chosenDates]);\r\n\r\n  // creates suggestions and word data used in Words component\r\n  useEffect(() => {\r\n    if (chosenDates !== null && Object.keys(headingMap).length > 0) {\r\n      const { selectedMap, totalMap } = getSelectedAndAllWordMap(\r\n        webisteJointData,\r\n        headingMap,\r\n        chosenDates,\r\n        selectedWebsites.names\r\n      );\r\n      setWordDataOfSelected(selectedMap);\r\n      setWordDataOfAll(totalMap);\r\n\r\n      setSelectedSuggsetions(getSuggestions(selectedMap));\r\n      setAllSuggsetions(getSuggestions(totalMap));\r\n    }\r\n  }, [webisteJointData, headingMap, chosenDates, selectedWebsites.names]);\r\n  return (\r\n    <>\r\n      <FullScreen\r\n        setFullScreenImage={setFellScreenAndResetPosition}\r\n        fullScreenImage={fullScreenImage}\r\n      />\r\n\r\n      <Topbar />\r\n\r\n      <WebsiteSelectorGrouping\r\n        webisteJointData={webisteJointData}\r\n        setSelectedWebsites={setSelectedWebsites}\r\n        selectedWebsites={selectedWebsites}\r\n      />\r\n\r\n      <DateGroup\r\n        fringeDates={fringeDates}\r\n        updateChosenDates={setChosenDates}\r\n        chosenDates={chosenDates}\r\n      />\r\n\r\n      {/* checks if data has been fetched from db */}\r\n      {chosenDates !== null &&\r\n      Object.keys(headingMap).length > 0 &&\r\n      Object.keys(wordDataOfAll).length > 0 ? (\r\n        <Switch>\r\n          <Route path=\"/words\">\r\n            <Words\r\n              suggestions={allSuggsetions}\r\n              wordDataOfAll={wordDataOfAll}\r\n              wordDataOfSelected={wordDataOfSelected}\r\n              webisteJointData={webisteJointData}\r\n            />\r\n          </Route>\r\n \r\n          <Route path=\"/screenshots\">\r\n            <Screenshots\r\n              selectedWebsites={selectedWebsites}\r\n              setFullScreenImage={setFellScreenAndResetPosition}\r\n              screenshotsByDate={screenshotsByDate}\r\n              chosenDates={chosenDates}\r\n            />\r\n          </Route>\r\n\r\n          <Route>\r\n            <Headings\r\n              suggestions={selectedSuggsetions}\r\n              \r\n              selectedWebsites={selectedWebsites}\r\n              chosenDates={chosenDates}\r\n              headingMap={headingMap}\r\n              downloadedHeadingImages={downloadedHeadingImages}\r\n              setDowloadedHeadingImages={setDowloadedHeadingImages}\r\n            />\r\n          </Route>\r\n        </Switch>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import ReactDOM from \"react-dom\";\n// import CssBaseline from \"@material-ui/core/CssBaseline\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport {\n  BrowserRouter as Router,\n} from \"react-router-dom\";\nrequire('dotenv').config()\n\n\nReactDOM.render(\n  <>\n    <Router>\n    <App />\n    </Router>\n\n  </>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}